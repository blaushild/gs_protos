// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: geopb/geopb.proto

package geopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeoLocator_AddressSearch_FullMethodName = "/geopb.GeoLocator/AddressSearch"
	GeoLocator_GeoCode_FullMethodName       = "/geopb.GeoLocator/GeoCode"
)

// GeoLocatorClient is the client API for GeoLocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoLocatorClient interface {
	AddressSearch(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	GeoCode(ctx context.Context, in *GeoCodeRequest, opts ...grpc.CallOption) (*AddressResponse, error)
}

type geoLocatorClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoLocatorClient(cc grpc.ClientConnInterface) GeoLocatorClient {
	return &geoLocatorClient{cc}
}

func (c *geoLocatorClient) AddressSearch(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, GeoLocator_AddressSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoLocatorClient) GeoCode(ctx context.Context, in *GeoCodeRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, GeoLocator_GeoCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoLocatorServer is the server API for GeoLocator service.
// All implementations must embed UnimplementedGeoLocatorServer
// for forward compatibility.
type GeoLocatorServer interface {
	AddressSearch(context.Context, *AddressRequest) (*AddressResponse, error)
	GeoCode(context.Context, *GeoCodeRequest) (*AddressResponse, error)
	mustEmbedUnimplementedGeoLocatorServer()
}

// UnimplementedGeoLocatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeoLocatorServer struct{}

func (UnimplementedGeoLocatorServer) AddressSearch(context.Context, *AddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressSearch not implemented")
}
func (UnimplementedGeoLocatorServer) GeoCode(context.Context, *GeoCodeRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoCode not implemented")
}
func (UnimplementedGeoLocatorServer) mustEmbedUnimplementedGeoLocatorServer() {}
func (UnimplementedGeoLocatorServer) testEmbeddedByValue()                    {}

// UnsafeGeoLocatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoLocatorServer will
// result in compilation errors.
type UnsafeGeoLocatorServer interface {
	mustEmbedUnimplementedGeoLocatorServer()
}

func RegisterGeoLocatorServer(s grpc.ServiceRegistrar, srv GeoLocatorServer) {
	// If the following call pancis, it indicates UnimplementedGeoLocatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeoLocator_ServiceDesc, srv)
}

func _GeoLocator_AddressSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoLocatorServer).AddressSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoLocator_AddressSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoLocatorServer).AddressSearch(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoLocator_GeoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoLocatorServer).GeoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoLocator_GeoCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoLocatorServer).GeoCode(ctx, req.(*GeoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoLocator_ServiceDesc is the grpc.ServiceDesc for GeoLocator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoLocator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geopb.GeoLocator",
	HandlerType: (*GeoLocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddressSearch",
			Handler:    _GeoLocator_AddressSearch_Handler,
		},
		{
			MethodName: "GeoCode",
			Handler:    _GeoLocator_GeoCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geopb/geopb.proto",
}
